; ModuleID = 'module-boris-input'
source_filename = "module-boris-input"
target triple = "x86_64-pc-linux-gnu"

@format_int = private unnamed_addr constant [4 x i8] c"%d\0A\00"

define i32 @strlen(i8* %s) {
init:
  %i = alloca i32
  store i32 0, i32* %i
  br label %check

check:                                            ; preds = %body, %init
  %0 = load i32, i32* %i
  %1 = getelementptr i8, i8* %s, i32 %0
  %2 = load i8, i8* %1
  %3 = icmp ne i8 0, %2
  br i1 %3, label %body, label %end

body:                                             ; preds = %check
  %4 = load i32, i32* %i
  %5 = add i32 %4, 1
  store i32 %5, i32* %i
  br label %check

end:                                              ; preds = %check
  %6 = load i32, i32* %i
  ret i32 %6
}

declare i32 @printf(...)

define void @main() {
MainEntry:
  %beg = alloca i32
  store i32 5, i32* %beg
  br label %foreachr_init_

foreachr_init_:                                   ; preds = %MainEntry
  %myitem = alloca i32
  %load_singleid_int_temp = load i32, i32* %beg
  store i32 %load_singleid_int_temp, i32* %myitem
  br label %foreachr_check_

foreachr_check_:                                  ; preds = %foreachr_body_, %foreachr_init_
  %0 = load i32, i32* %myitem
  %1 = icmp sle i32 %0, 15
  br i1 %1, label %foreachr_body_, label %foreachr_end_

foreachr_body_:                                   ; preds = %foreachr_check_
  %load_singleid_int_temp1 = load i32, i32* %myitem
  %2 = call i32 (...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @format_int, i32 0, i32 0), i32 %load_singleid_int_temp1)
  %3 = load i32, i32* %myitem
  %4 = add i32 %3, 1
  store i32 %4, i32* %myitem
  br label %foreachr_check_

foreachr_end_:                                    ; preds = %foreachr_check_
  br label %EndEntry

EndEntry:                                         ; preds = %foreachr_end_
  ret void
}
